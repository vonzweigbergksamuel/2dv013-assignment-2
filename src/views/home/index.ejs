<!-- Main jumbotron for a primary marketing message or call to action -->
<div class="jumbotron">
  <div class="container">
    <h1 class="display-3">
      Just Task It!
    </h1>
    <p>
      This is an example of an Express website handling persistent data.
    </p>
    <p>
      <a class="btn btn-primary btn-lg" href="https://rawgit.com/1dv023/syllabus/master/lectures/03/index.html"
        role="button">
        Learn more »
      </a>
    </p>
  </div>
</div>
<div class="container">
  <!-- Example row of columns -->
  <div class="row">
    <div class="col-md-3">
      <h2>
        CRUD
      </h2>
      <p>
        CRUD stands for Create, Read, Update, and Delete, which are the four basic operations performed on data in
        databases or
        applications. These operations allow users to add new data (Create), retrieve existing data (Read), modify
        existing data
        (Update), and remove data (Delete). CRUD is essential for managing data and maintaining its integrity in various
        systems, such as web applications, databases, and APIs.
      </p>
      <p>
        <a class="btn btn-secondary" href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" role="button">
          View details »
        </a>
      </p>
    </div>
    <div class="col-md-3">
      <h2>
        PRG
      </h2>
      <p>
        PRG stands for Post/Redirect/Get, a web development design pattern used to prevent duplicate form submissions
        and
        improve user experience. After a user submits a form using the POST method, the server processes the data and
        then
        issues a redirect to a new URL, typically using the GET method. This approach ensures that refreshing the page
        or using
        the browser's back button won't result in duplicate submissions, as the browser will only re-request the
        redirected GET
        URL, not the original POST submission. PRG helps maintain data integrity and provides a more seamless user
        experience.
      </p>
      <p>
        <a class="btn btn-secondary" href="https://en.wikipedia.org/wiki/Post/Redirect/Get" role="button">
          View details »
        </a>
      </p>
    </div>
    <div class="col-md-3">
      <h2>
        Session
      </h2>
      <p>
        A session, in the context of web development, refers to a series of interactions between a user and a web
        application
        during a specific time period. Sessions are used to maintain state and track user activity, as HTTP, the
        protocol used
        for web communication, is stateless by nature.</p>
      <p>
        To create a session, a unique identifier, often called a session ID, is generated by the server when a user
        first
        accesses the application. This ID is then stored on the client-side, typically as a cookie. The server
        associates the
        session ID with user-specific data, such as login credentials, preferences, or shopping cart items. As the user
        navigates the application, the session ID is sent with each request, allowing the server to recognize and
        maintain the
        user's state. Sessions usually have a predefined expiration time, after which they are terminated to free up
        resources.
      </p>
      <p>
        <a class="btn btn-secondary" href="https://en.wikipedia.org/wiki/Session_(computer_science)" role="button">
          View details »
        </a>
      </p>
    </div>
    <div class="col-md-3">
      <h2>
        Flash messages
      </h2>
      <p>
        Flash messages are temporary notifications displayed to users in web applications, often used to convey the
        status of an
        action, such as a successful form submission or an error. They are stored in the user's session and
        automatically
        removed once displayed, ensuring they appear only once during the user's interaction with the application. Flash
        messages enhance user experience by providing timely feedback.
      </p>
      <p>
        <a class="btn btn-secondary"
          href="https://ux.stackexchange.com/questions/39265/placement-of-flash-growl-notifications-or-messages-in-web-application"
          role="button">
          View details »
        </a>
      </p>
    </div>
  </div>
  <hr />
</div>
<!-- /container -->